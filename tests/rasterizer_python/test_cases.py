import torch
from diff_gaussian_rasterization import GaussianRasterizationSettings
from torch import Tensor

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

common_setting = dict(
    image_height=416,
    image_width=634,
    tanfovx=0.600592,
    tanfovy=0.395425,
    bg=torch.zeros(3, device=device),
    scale_modifier=1.0,
    sh_degree=3,
    prefiltered=False,
    debug=False,
    antialiasing=False
)

settings = [
    # treehill No.0
    GaussianRasterizationSettings(
        viewmatrix=Tensor([
            [-0.1372,  0.1419,  0.9803,  0.0000],
            [ 0.3828,  0.9204, -0.0796,  0.0000],
            [-0.9136,  0.3644, -0.1805,  0.0000],
            [ 0.1878, -0.6085,  4.0976,  1.0000],
        ]).to(device),
        projmatrix=Tensor([
            [-0.2284,  0.3588,  0.9805,  0.9803],
            [ 0.6374,  2.3276, -0.0797, -0.0796],
            [-1.5211,  0.9215, -0.1806, -0.1805],
            [ 0.3127, -1.5389,  4.0884,  4.0976],
        ]).to(device),
        campos=Tensor([-3.9049,  0.8146,  1.1331]).to(device),
        **common_setting,
    ),
    # treehill No.64
    GaussianRasterizationSettings(
        viewmatrix=Tensor([
            [-0.8135,  0.1977, -0.5469,  0.0000],
            [-0.1718,  0.8168,  0.5508,  0.0000],
            [ 0.5556,  0.5420, -0.6305,  0.0000],
            [ 0.1582, -0.6477,  3.8514,  1.0000],
        ]).to(device),
        projmatrix=Tensor([
            [-1.3546,  0.5000, -0.5470, -0.5469],
            [-0.2860,  2.0656,  0.5509,  0.5508],
            [ 0.9250,  1.3707, -0.6307, -0.6305],
            [ 0.2634, -1.6380,  3.8421,  3.8514],
        ]).to(device),
        campos=Tensor([2.3629, -1.5651,  2.6916]).to(device),
        **common_setting,
    ),
    # treehill No.121
    GaussianRasterizationSettings(
        viewmatrix=Tensor([
            [ 0.4699, -0.0412, -0.8817,  0.0000],
            [-0.3237,  0.9213, -0.2156,  0.0000],
            [ 0.8212,  0.3867,  0.4196,  0.0000],
            [ 0.1214,  0.8112,  3.3397,  1.0000],
        ]).to(device),
        projmatrix=Tensor([
            [ 0.7824, -0.1042, -0.8819, -0.8817],
            [-0.5389,  2.3299, -0.2156, -0.2156],
            [ 1.3674,  0.9779,  0.4197,  0.4196],
            [ 0.2022,  2.0514,  3.3303,  3.3397],
        ]).to(device),
        campos=Tensor([2.9211,  0.0119, -1.8147]).to(device),
        **common_setting,
    ),
]


points_3d = Tensor([
    [ 1.0944e+01, -4.8561e+00, -1.0636e+01],
    [-4.8238e-01,  1.4467e-01, -9.8337e-02],
    [ 6.8755e-01, -5.4663e-01, -4.6539e+00],
    [ 1.1411e+01, -2.9210e+00, -3.2118e+00],
    [-5.2883e-01,  7.7142e-02,  2.8977e-02],
    [ 5.1769e+00,  4.0422e+00, -1.1478e+01],
    [-4.3550e-01, -1.0035e-01,  1.7025e-01],
    [-5.3081e-01, -1.7648e+00, -1.8088e-01],
    [ 1.6770e-01, -5.6421e-01, -5.4572e-01],
    [-2.7843e-01,  6.5947e-01, -2.6066e-01],
    [ 6.5898e-01,  1.2861e+00,  7.5025e-02],
    [-4.9127e-01,  7.1981e-01,  1.6120e+00],
    [-1.5864e+00,  1.3043e+00,  4.2505e-01],
    [-5.2574e-01,  6.4865e-01,  3.7275e-01],
    [ 2.2823e+00,  2.2932e+00, -3.9728e+00],
    [-5.7877e-01, -1.5591e+00, -3.1844e-01],
    [-5.9162e+00, -4.8624e+00,  4.0677e+00],
    [-5.4701e+00,  1.6600e-01, -6.8268e+00],
    [-5.0782e+00, -1.6437e+00, -1.8013e+00],
    [ 2.2808e+00, -3.0619e+00,  9.7527e+00],
    [-1.3615e+00,  1.5002e+00, -1.1235e-01],
    [ 2.7135e-01, -5.6380e-01, -3.2894e-01],
    [-2.1227e+00,  3.0934e+00, -5.5830e+00],
    [ 4.0776e-02, -9.6567e-01, -7.8064e-01],
    [-7.1027e-02, -1.3990e+00, -8.3637e-01],
    [ 4.0999e+01, -2.9323e+01,  7.7273e+01],
    [-1.4643e-01,  8.6945e-02, -4.4752e-01],
    [-9.6793e-01,  1.6014e+00, -3.2348e-01],
    [-2.7220e+00, -7.2853e+00,  2.3923e+01],
    [-1.8336e+01, -8.1603e+00, -2.8163e+00],
    [-8.9150e-01,  1.6688e+00, -6.2887e-01],
    [-7.0617e+00,  8.2491e-01, -3.5278e+00],
    [-9.2120e-01,  1.9680e+00, -1.2410e+00],
    [ 6.9965e-01,  1.2560e+00,  1.4100e-01],
    [-1.5128e-01,  1.3863e+00, -2.5970e-01],
    [ 2.7196e-01,  7.4474e-01, -1.4068e-01],
    [-2.3514e-01,  1.3249e+00, -2.5435e-01],
    [-5.4366e-01,  1.3853e+00, -1.9680e-01],
    [-2.5553e-02,  9.9970e-01, -2.7957e-01],
    [ 4.9884e+00,  7.4506e-01,  1.1844e+00],
    [-5.2283e-01,  5.8636e-02, -1.8771e-03],
    [ 4.7993e+01, -4.4934e+01,  8.4333e+01],
    [-3.5310e+00, -1.2803e+00,  7.0927e+00],
    [ 1.1928e+00,  1.1556e+00,  4.1570e-01],
    [ 1.9946e-01, -1.8731e-01, -3.6209e-01],
    [ 4.2568e-03,  3.0294e-01,  1.0084e+00],
    [ 4.7876e-01,  1.4790e+00, -3.2906e-01],
    [ 5.7161e-01,  8.3810e-01, -3.9005e-01],
    [ 4.1180e+00, -5.2300e-01,  3.4426e+00],
    [ 2.7022e-01,  5.4732e-01, -1.6731e-01],
    [-5.6110e-02, -4.0701e-01,  1.5949e-01],
    [ 2.1325e-02,  2.8686e-01,  1.0871e+00],
    [ 3.2715e-01, -1.2422e+00, -5.0867e-01],
]).to(device)
